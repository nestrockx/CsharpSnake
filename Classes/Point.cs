using System;

namespace CSharpGame
{
    /// <summary>
    /// point struct
    /// </summary>
	public struct Point
	{
        /// <summary>
        /// equality operator override
        /// </summary>
        /// <param name="p1">point 1</param>
        /// <param name="p2">point 2</param>
        /// <returns>bool</returns>
		public static bool operator ==(Point p1, Point p2)
		{
			if(p1.X == p2.X && p1.Y == p2.Y){
				return true;
			}
			return false;
		}

        /// <summary>
        /// inequality operator override
        /// </summary>
        /// <param name="p1">point 1</param>
        /// <param name="p2">point 2</param>
        /// <returns>bool</returns>
		public static bool operator !=(Point p1, Point p2)
		{
			if(p1.X == p2.X && p1.Y == p2.Y){
				return false;
			}
			return true;
		}

        /// <summary>
        /// first coordinate property
        /// </summary>
        public int X;

        /// <summary>
        /// second coordinate property
        /// </summary>
        public int Y;

        /// <summary>
        /// struct constructor
        /// </summary>
        /// <param name="X">first coordinate</param>
        /// <param name="Y">second coordinate</param>
		public Point(int X, int Y){
			this.X = X;
			this.Y = Y;
		}

        /// <summary>
        /// translate to right
        /// </summary>
		public void Right(){
			X++;
		}

        /// <summary>
        /// translate to left
        /// </summary>
		public void Left(){
			X--;
		}

        /// <summary>
        /// translate up
        /// </summary>
		public void Up(){
			Y--;
		}

        /// <summary>
        /// translate down
        /// </summary>
		public void Down(){
			Y++;
		}

        //code generated by IDE{
        /// <summary>
        /// equals method override
        /// </summary>
        /// <param name="obj"></param>
        /// <returns>bool</returns>
        public override bool Equals(object obj)
        {
            if (!(obj is Point))
            {
                return false;
            }

            var point = (Point)obj;
            return X == point.X &&
                   Y == point.Y;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns>hascode</returns>
        public override int GetHashCode()
        {
            var hashCode = 1861411795;
            hashCode = hashCode * -1521134295 + X.GetHashCode();
            hashCode = hashCode * -1521134295 + Y.GetHashCode();
            return hashCode;
        }
        //}
    }
}

